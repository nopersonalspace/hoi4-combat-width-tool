[{"/Users/harris/Documents/combat-width-tool/.eslintrc.js":"1","/Users/harris/Documents/combat-width-tool/pre_commit_hooks/do_not_submit.js":"2","/Users/harris/Documents/combat-width-tool/pre_commit_hooks/validate_TODO.js":"3","/Users/harris/Documents/combat-width-tool/src/App.tsx":"4","/Users/harris/Documents/combat-width-tool/src/main.tsx":"5","/Users/harris/Documents/combat-width-tool/src/theme/darkTheme.ts":"6","/Users/harris/Documents/combat-width-tool/src/theme/index.ts":"7","/Users/harris/Documents/combat-width-tool/src/vite-env.d.ts":"8","/Users/harris/Documents/combat-width-tool/vite.config.ts":"9"},{"size":11243,"mtime":1659722990906,"results":"10","hashOfConfig":"11"},{"size":1663,"mtime":1659723336659,"results":"12","hashOfConfig":"13"},{"size":2458,"mtime":1659723346969,"results":"14","hashOfConfig":"13"},{"size":1185,"mtime":1659724599403,"results":"15","hashOfConfig":"16"},{"size":414,"mtime":1659724608706,"results":"17","hashOfConfig":"16"},{"size":621,"mtime":1659724618017,"results":"18","hashOfConfig":"16"},{"size":29,"mtime":1659724622659,"results":"19","hashOfConfig":"16"},{"size":38,"mtime":1659721131679,"results":"20","hashOfConfig":"16"},{"size":166,"mtime":1659724724721,"results":"21","hashOfConfig":"16"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kwil49",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"msibf",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1utx7yg",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/harris/Documents/combat-width-tool/.eslintrc.js",["51"],["52"],"/Users/harris/Documents/combat-width-tool/pre_commit_hooks/do_not_submit.js",["53","54"],[],"#! node\n\nconst { readFileSync } = require(\"fs\");\n\n/**\n * These words will be caught as being actionable on CI, but not locally.\n */\nconst CI_BAD_WORDS = [\"DO NOT SUBMIT\", \"FIXME\", \"FIX ME\"];\n\n/**\n * These words will be caught as being actionable, bot locally and on CI.\n */\nconst LOCAL_BAD_WORDS = [\n  \"@memberof\",\n  \"@module\",\n  \"from 'lodash'\",\n  \"from 'lodash/flatten'\", // use .flat()\n  \"@returns -\", // Just use `@returns My Comment`\n];\n\n/**\n * Finds a list of occurrences of a given set of bad words in all affected files\n *\n * @param badWordSet - The set of bad words to look for\n * @returns a list of issues\n */\nfunction findIssues(badWordSet) {\n  const filenames = process.argv.slice(2);\n\n  return filenames.flatMap((filename) =>\n    readFileSync(filename, \"utf8\")\n      .split(\"\\n\")\n      .map((text, index) => ({ text, line: index + 1, filename }))\n      .filter(\n        ({ text }) => badWordSet.map((word) => text.includes(word)).length > 0\n      )\n      .flatMap(({ text, line }) =>\n        badWordSet\n          .filter((word) => text.includes(word))\n          .map((phrase) => `Found \"${phrase}\" on ${filename}:${line}`)\n      )\n  );\n}\n\n/**\n * Finds banned phrases in any changed file\n *\n * @returns non-zero when any changed file contains a banned phrase\n */\nfunction main() {\n  const localIssues = findIssues(LOCAL_BAD_WORDS);\n  if (localIssues.length > 0) {\n    localIssues.forEach((error) => console.log(error));\n    return 1;\n  }\n\n  const ciIssues = findIssues(CI_BAD_WORDS);\n  if (process.env.CI === \"true\" && ciIssues.length > 0) {\n    ciIssues.forEach((error) => console.log(error));\n    return 1;\n  }\n\n  return 0;\n}\n\nprocess.exit(main());\n","/Users/harris/Documents/combat-width-tool/pre_commit_hooks/validate_TODO.js",["55","56","57"],[],"#! node\n\nconst fs = require('fs');\n\nconst SHOW_ALL = '--show-all';\n\n/**\n * Ensure that all TODOs are in the correct format\n *\n * @returns non-zero when any changed file\n */\nfunction main() {\n  // get the files passed in from pre-commit\n  const showAll = process.argv.includes(SHOW_ALL);\n  const files = process.argv.slice(1).filter((arg) => arg !== SHOW_ALL);\n\n  let filesChanged = false;\n  const changeSummary = [];\n\n  files.forEach((file) => {\n    let status; // leave status undefined in skip case for better color highlighting\n    try {\n      // finds todos in non-standard formats\n      const todoRegex =\n        // eslint-disable-next-line max-len\n        /((\\/\\/|\\*)[ \\t]*TODO)[:\\-—]?[ \\t]*\\(?[ \\t]*(https?:\\/\\/\\S+(?<!([:\\-—)])))[ \\t]*\\)?[ \\t]*(:|[-—]+[ \\t])?[ \\t]*(.*?)[ \\t]*(\\*\\/)?$/gm;\n      const contents = fs.readFileSync(file).toString('utf-8');\n      let matches = todoRegex.exec(contents);\n      let replaced = contents;\n      // keep track of the indices as they change\n      let offset = 0;\n      while (matches) {\n        // indexes corresponding to parts of the regex\n        const TODO_INDEX = 1;\n        const LINK_INDEX = 3;\n        const COMMENT_INDEX = 6;\n        const CLOSE_COMMENT_INDEX = 7;\n\n        const swappedTodo = [\n          `${matches[TODO_INDEX]}:`,\n          matches[LINK_INDEX],\n          `${\n            matches[COMMENT_INDEX].replace(/[-—]/g, '').trim()\n              ? `- ${matches[COMMENT_INDEX]}`\n              : ''\n          }`,\n          matches[CLOSE_COMMENT_INDEX],\n        ]\n          .filter((part) => part)\n          .join(' ');\n\n        replaced =\n          replaced.substring(0, matches.index + offset) +\n          swappedTodo +\n          replaced.substring(matches.index + matches[0].length + offset);\n\n        // update the offset with the change in length\n        offset += swappedTodo.length - matches[0].length;\n\n        matches = todoRegex.exec(contents);\n      }\n\n      if (contents !== replaced) {\n        filesChanged = true;\n        status = 'Changed';\n        fs.writeFileSync(file, replaced);\n      }\n    } catch (e) {\n      status = `Error: ${e.message}`;\n      console.error(`Error evaluating \"${file}\":`, e);\n    } finally {\n      if (status || showAll) {\n        changeSummary.push({ file, status });\n      }\n    }\n  });\n\n  if (filesChanged) {\n    console.table(changeSummary);\n  }\n\n  // return non-zero if anything changed\n  return filesChanged ? 1 : 0;\n}\n\nprocess.exit(main());\n","/Users/harris/Documents/combat-width-tool/src/App.tsx",[],[],"/Users/harris/Documents/combat-width-tool/src/main.tsx",[],[],"/Users/harris/Documents/combat-width-tool/src/theme/darkTheme.ts",[],[],"/Users/harris/Documents/combat-width-tool/src/theme/index.ts",[],[],"/Users/harris/Documents/combat-width-tool/src/vite-env.d.ts",[],[],"/Users/harris/Documents/combat-width-tool/vite.config.ts",[],[],{"ruleId":"58","severity":1,"message":"59","line":149,"column":null,"nodeType":"60","endLine":149,"endColumn":null},{"ruleId":"61","severity":2,"message":"62","line":351,"column":1,"nodeType":null,"messageId":"63","endLine":415,"endColumn":1,"suppressions":"64"},{"ruleId":"65","severity":2,"message":"66","line":53,"column":36,"nodeType":"67","messageId":"68","endLine":53,"endColumn":47},{"ruleId":"65","severity":2,"message":"66","line":59,"column":33,"nodeType":"67","messageId":"68","endLine":59,"endColumn":44},{"ruleId":"69","message":"70","line":25,"column":37,"severity":2,"nodeType":null,"fix":"71","suggestions":"72","endLine":25,"endColumn":44},{"ruleId":"65","severity":2,"message":"66","line":70,"column":7,"nodeType":"67","messageId":"68","endLine":70,"endColumn":20},{"ruleId":"65","severity":2,"message":"66","line":79,"column":5,"nodeType":"67","messageId":"68","endLine":79,"endColumn":18},"jsdoc/check-tag-names","Invalid JSDoc tag name \"typescript-eslint\".","Block","max-lines","File has too many lines (414). Maximum allowed is 350.","exceed",["73"],"no-console","Unexpected console statement.","MemberExpression","unexpected","eslint-comments/no-unused-disable","'max-len' rule is disabled but never reported.",{"range":"74","text":"75"},["76"],{"kind":"77","justification":"78"},[618,653]," ",{"desc":"79","fix":"80"},"directive","","Remove `eslint-disable` comment.",{"range":"74","text":"78"}]